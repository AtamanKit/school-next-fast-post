============================= test session starts ==============================
platform linux -- Python 3.11.8, pytest-8.0.1, pluggy-1.4.0
rootdir: /app
configfile: pytest.ini
plugins: asyncio-0.23.5.post1, postgresql-5.1.0, anyio-4.2.0
asyncio: mode=Mode.AUTO
collected 1 item

tests/test_api.py E                                                      [100%]

==================================== ERRORS ====================================
_____________________ ERROR at setup of test_api_employee ______________________

request = <SubRequest 'setup_database' for <Coroutine test_api_employee>>
kwargs = {}, func = <function setup_database at 0x7381b81337e0>
setup = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.setup at 0x7381b79d22a0>
finalizer = <function _wrap_asyncgen_fixture.<locals>._asyncgen_fixture_wrapper.<locals>.finalizer at 0x7381b79d2200>

    @functools.wraps(fixture)
    def _asyncgen_fixture_wrapper(request: SubRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(
            fixture, request.instance, fixturedef.unittest
        )
        event_loop = kwargs.pop(event_loop_fixture_id)
        gen_obj = func(
            **_add_kwargs(func, kwargs, event_loop_fixture_id, event_loop, request)
        )
    
        async def setup():
            res = await gen_obj.__anext__()
            return res
    
        def finalizer() -> None:
            """Yield again, to finalize."""
    
            async def async_finalizer() -> None:
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)
    
            event_loop.run_until_complete(async_finalizer())
    
>       result = event_loop.run_until_complete(setup())

/usr/local/lib/python3.11/site-packages/pytest_asyncio/plugin.py:347: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/local/lib/python3.11/asyncio/base_events.py:654: in run_until_complete
    return future.result()
/usr/local/lib/python3.11/site-packages/pytest_asyncio/plugin.py:329: in setup
    res = await gen_obj.__anext__()
tests/conftest.py:17: in setup_database
    async with sessionmanager.connect() as connection:
/usr/local/lib/python3.11/contextlib.py:210: in __aenter__
    return await anext(self.gen)
app/database.py:33: in connect
    async with self._engine.begin() as connection:
/usr/local/lib/python3.11/contextlib.py:210: in __aenter__
    return await anext(self.gen)
/usr/local/lib/python3.11/site-packages/sqlalchemy/ext/asyncio/engine.py:1054: in begin
    async with conn:
/usr/local/lib/python3.11/site-packages/sqlalchemy/ext/asyncio/base.py:121: in __aenter__
    return await self.start(is_ctxmanager=True)
/usr/local/lib/python3.11/site-packages/sqlalchemy/ext/asyncio/engine.py:270: in start
    await greenlet_spawn(self.sync_engine.connect)
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:197: in greenlet_spawn
    result = context.throw(*sys.exc_info())
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:3258: in connect
    return self._connection_cls(self)
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:145: in __init__
    self._dbapi_connection = engine.raw_connection()
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/base.py:3282: in raw_connection
    return self.pool.connect()
/usr/local/lib/python3.11/site-packages/sqlalchemy/pool/base.py:449: in connect
    return _ConnectionFairy._checkout(self)
/usr/local/lib/python3.11/site-packages/sqlalchemy/pool/base.py:1263: in _checkout
    fairy = _ConnectionRecord.checkout(pool)
/usr/local/lib/python3.11/site-packages/sqlalchemy/pool/base.py:712: in checkout
    rec = pool._do_get()
/usr/local/lib/python3.11/site-packages/sqlalchemy/pool/impl.py:168: in _do_get
    with util.safe_reraise():
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
/usr/local/lib/python3.11/site-packages/sqlalchemy/pool/impl.py:166: in _do_get
    return self._create_connection()
/usr/local/lib/python3.11/site-packages/sqlalchemy/pool/base.py:390: in _create_connection
    return _ConnectionRecord(self)
/usr/local/lib/python3.11/site-packages/sqlalchemy/pool/base.py:674: in __init__
    self.__connect()
/usr/local/lib/python3.11/site-packages/sqlalchemy/pool/base.py:900: in __connect
    with util.safe_reraise():
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/langhelpers.py:146: in __exit__
    raise exc_value.with_traceback(exc_tb)
/usr/local/lib/python3.11/site-packages/sqlalchemy/pool/base.py:896: in __connect
    self.dbapi_connection = connection = pool._invoke_creator(self)
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/create.py:643: in connect
    return dialect.connect(*cargs, **cparams)
/usr/local/lib/python3.11/site-packages/sqlalchemy/engine/default.py:616: in connect
    return self.loaded_dbapi.connect(*cargs, **cparams)
/usr/local/lib/python3.11/site-packages/sqlalchemy/dialects/postgresql/asyncpg.py:937: in connect
    await_only(creator_fn(*arg, **kw)),
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:127: in await_only
    return current.driver.switch(awaitable)  # type: ignore[no-any-return]
/usr/local/lib/python3.11/site-packages/sqlalchemy/util/_concurrency_py3k.py:192: in greenlet_spawn
    value = await result
/usr/local/lib/python3.11/site-packages/asyncpg/connection.py:2329: in connect
    return await connect_utils._connect(
/usr/local/lib/python3.11/site-packages/asyncpg/connect_utils.py:1017: in _connect
    raise last_error or exceptions.TargetServerAttributeNotMatched(
/usr/local/lib/python3.11/site-packages/asyncpg/connect_utils.py:991: in _connect
    conn = await _connect_addr(
/usr/local/lib/python3.11/site-packages/asyncpg/connect_utils.py:828: in _connect_addr
    return await __connect_addr(params, True, *args)
/usr/local/lib/python3.11/site-packages/asyncpg/connect_utils.py:873: in __connect_addr
    tr, pr = await connector
/usr/local/lib/python3.11/site-packages/asyncpg/connect_utils.py:744: in _create_ssl_connection
    tr, pr = await loop.create_connection(
/usr/local/lib/python3.11/asyncio/base_events.py:1046: in create_connection
    infos = await self._ensure_resolved(
/usr/local/lib/python3.11/asyncio/base_events.py:1420: in _ensure_resolved
    return await loop.getaddrinfo(host, port, family=family, type=type,
/usr/local/lib/python3.11/asyncio/base_events.py:868: in getaddrinfo
    return await self.run_in_executor(
/usr/local/lib/python3.11/concurrent/futures/thread.py:58: in run
    result = self.fn(*self.args, **self.kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

host = 'db_test', port = 5432, family = 0, type = <SocketKind.SOCK_STREAM: 1>
proto = 0, flags = 0

    def getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
        """Resolve host and port into list of address info entries.
    
        Translate the host/port argument into a sequence of 5-tuples that contain
        all the necessary arguments for creating a socket connected to that service.
        host is a domain name, a string representation of an IPv4/v6 address or
        None. port is a string service name such as 'http', a numeric port number or
        None. By passing None as the value of host and port, you can pass NULL to
        the underlying C API.
    
        The family, type and proto arguments can be optionally specified in order to
        narrow the list of addresses returned. Passing zero as a value for each of
        these arguments selects the full range of results.
        """
        # We override this function since we want to translate the numeric family
        # and socket type values to enum constants.
        addrlist = []
>       for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
E       socket.gaierror: [Errno -3] Try again

/usr/local/lib/python3.11/socket.py:962: gaierror
=============================== warnings summary ===============================
app/database.py:6
  /app/app/database.py:6: MovedIn20Warning: The ``declarative_base()`` function is now available as sqlalchemy.orm.declarative_base(). (deprecated since: 2.0) (Background on SQLAlchemy 2.0 at: https://sqlalche.me/e/b8d9)
    Base = declarative_base()

../usr/local/lib/python3.11/site-packages/pydantic/_internal/_config.py:272
  /usr/local/lib/python3.11/site-packages/pydantic/_internal/_config.py:272: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.6/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

../usr/local/lib/python3.11/site-packages/pydantic/_internal/_config.py:322
  /usr/local/lib/python3.11/site-packages/pydantic/_internal/_config.py:322: UserWarning: Valid config keys have changed in V2:
  * 'orm_mode' has been renamed to 'from_attributes'
    warnings.warn(message, UserWarning)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
ERROR tests/test_api.py::test_api_employee - socket.gaierror: [Errno -3] Try ...
========================= 3 warnings, 1 error in 5.43s =========================
